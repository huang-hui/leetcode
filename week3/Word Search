class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if(board is None or len(board)==0 or len(board[0])==0):
            return(False)
        for i in range(len(board)):
            for j in range(len(board[0])):
                if(board[i][j]==word[0]):
                    visited=[[False]*len(board[0]) for k in range(len(board))]
                    visited[i][j]=True
                    if(self.dfs(board,i,j,word[1:],visited)):
                        return(True)
        return(False)
    def dfs(self,board,i,j,word,visited):
        if(len(word)==0):
            return(True)
        for x, y in ((i,j+1),(i,j-1),(i-1,j),(i+1,j)):
            if(x>=0 and x<len(board) and y>=0 and y<len(board[0]) and not visited[x][y] and board[x][y]==word[0]):
                visited[x][y]=True
                if(self.dfs(board,x,y,word[1:],visited)):
                    return(True)
                visited[x][y]=False # need remember to backtrack
        return(False)
